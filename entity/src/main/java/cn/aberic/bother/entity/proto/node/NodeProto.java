/*
 * MIT License
 *
 * Copyright (c) 2018 Aberic Yang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/Node.proto

package cn.aberic.bother.entity.proto.node;

public final class NodeProto {
  private NodeProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface NodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Node)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 当前节点的基本信息
     * </pre>
     *
     * <code>.NodeBase nodeBase = 1;</code>
     */
    boolean hasNodeBase();
    /**
     * <pre>
     * 当前节点的基本信息
     * </pre>
     *
     * <code>.NodeBase nodeBase = 1;</code>
     */
    NodeBaseProto.NodeBase getNodeBase();
    /**
     * <pre>
     * 当前节点的基本信息
     * </pre>
     *
     * <code>.NodeBase nodeBase = 1;</code>
     */
    NodeBaseProto.NodeBaseOrBuilder getNodeBaseOrBuilder();

    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */
    int getAddressElectionMapCount();
    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */
    boolean containsAddressElectionMap(
            String key);
    /**
     * Use {@link #getAddressElectionMapMap()} instead.
     */
    @Deprecated
    java.util.Map<String, String>
    getAddressElectionMap();
    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */
    java.util.Map<String, String>
    getAddressElectionMapMap();
    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */

    String getAddressElectionMapOrDefault(
            String key,
            String defaultValue);
    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */

    String getAddressElectionMapOrThrow(
            String key);

    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */
    int getNodeBaseAssistMapCount();
    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */
    boolean containsNodeBaseAssistMap(
            String key);
    /**
     * Use {@link #getNodeBaseAssistMapMap()} instead.
     */
    @Deprecated
    java.util.Map<String, NodeBaseProto.NodeBase>
    getNodeBaseAssistMap();
    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */
    java.util.Map<String, NodeBaseProto.NodeBase>
    getNodeBaseAssistMapMap();
    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */

    NodeBaseProto.NodeBase getNodeBaseAssistMapOrDefault(
            String key,
            NodeBaseProto.NodeBase defaultValue);
    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */

    NodeBaseProto.NodeBase getNodeBaseAssistMapOrThrow(
            String key);

    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */
    int getAddressMapCount();
    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */
    boolean containsAddressMap(
            String key);
    /**
     * Use {@link #getAddressMapMap()} instead.
     */
    @Deprecated
    java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>
    getAddressMap();
    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */
    java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>
    getAddressMapMap();
    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */

    cn.aberic.bother.entity.proto.MapListStringProto.MapListString getAddressMapOrDefault(
            String key,
            cn.aberic.bother.entity.proto.MapListStringProto.MapListString defaultValue);
    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */

    cn.aberic.bother.entity.proto.MapListStringProto.MapListString getAddressMapOrThrow(
            String key);

    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */
    int getNodeAssistMapCount();
    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */
    boolean containsNodeAssistMap(
            String key);
    /**
     * Use {@link #getNodeAssistMapMap()} instead.
     */
    @Deprecated
    java.util.Map<String, NodeAssistProto.NodeAssist>
    getNodeAssistMap();
    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */
    java.util.Map<String, NodeAssistProto.NodeAssist>
    getNodeAssistMapMap();
    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */

    NodeAssistProto.NodeAssist getNodeAssistMapOrDefault(
            String key,
            NodeAssistProto.NodeAssist defaultValue);
    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */

    NodeAssistProto.NodeAssist getNodeAssistMapOrThrow(
            String key);

    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */
    int getNodeElectionMapCount();
    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */
    boolean containsNodeElectionMap(
            String key);
    /**
     * Use {@link #getNodeElectionMapMap()} instead.
     */
    @Deprecated
    java.util.Map<String, NodeElectionProto.NodeElection>
    getNodeElectionMap();
    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */
    java.util.Map<String, NodeElectionProto.NodeElection>
    getNodeElectionMapMap();
    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */

    NodeElectionProto.NodeElection getNodeElectionMapOrDefault(
            String key,
            NodeElectionProto.NodeElection defaultValue);
    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */

    NodeElectionProto.NodeElection getNodeElectionMapOrThrow(
            String key);
  }
  /**
   * <pre>
   * 节点基类对象
   * </pre>
   *
   * Protobuf type {@code Node}
   */
  public  static final class Node extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Node)
      NodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Node.newBuilder() to construct.
    private Node(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Node() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Node(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              NodeBaseProto.NodeBase.Builder subBuilder = null;
              if (nodeBase_ != null) {
                subBuilder = nodeBase_.toBuilder();
              }
              nodeBase_ = input.readMessage(NodeBaseProto.NodeBase.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(nodeBase_);
                nodeBase_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                addressElectionMap_ = com.google.protobuf.MapField.newMapField(
                    AddressElectionMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<String, String>
              addressElectionMap__ = input.readMessage(
                  AddressElectionMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              addressElectionMap_.getMutableMap().put(
                  addressElectionMap__.getKey(), addressElectionMap__.getValue());
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                nodeBaseAssistMap_ = com.google.protobuf.MapField.newMapField(
                    NodeBaseAssistMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<String, NodeBaseProto.NodeBase>
              nodeBaseAssistMap__ = input.readMessage(
                  NodeBaseAssistMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              nodeBaseAssistMap_.getMutableMap().put(
                  nodeBaseAssistMap__.getKey(), nodeBaseAssistMap__.getValue());
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                addressMap_ = com.google.protobuf.MapField.newMapField(
                    AddressMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000008;
              }
              com.google.protobuf.MapEntry<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>
              addressMap__ = input.readMessage(
                  AddressMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              addressMap_.getMutableMap().put(
                  addressMap__.getKey(), addressMap__.getValue());
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                nodeAssistMap_ = com.google.protobuf.MapField.newMapField(
                    NodeAssistMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<String, NodeAssistProto.NodeAssist>
              nodeAssistMap__ = input.readMessage(
                  NodeAssistMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              nodeAssistMap_.getMutableMap().put(
                  nodeAssistMap__.getKey(), nodeAssistMap__.getValue());
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                nodeElectionMap_ = com.google.protobuf.MapField.newMapField(
                    NodeElectionMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000020;
              }
              com.google.protobuf.MapEntry<String, NodeElectionProto.NodeElection>
              nodeElectionMap__ = input.readMessage(
                  NodeElectionMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              nodeElectionMap_.getMutableMap().put(
                  nodeElectionMap__.getKey(), nodeElectionMap__.getValue());
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return NodeProto.internal_static_Node_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetAddressElectionMap();
        case 3:
          return internalGetNodeBaseAssistMap();
        case 4:
          return internalGetAddressMap();
        case 5:
          return internalGetNodeAssistMap();
        case 6:
          return internalGetNodeElectionMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return NodeProto.internal_static_Node_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              NodeProto.Node.class, NodeProto.Node.Builder.class);
    }

    private int bitField0_;
    public static final int NODEBASE_FIELD_NUMBER = 1;
    private NodeBaseProto.NodeBase nodeBase_;
    /**
     * <pre>
     * 当前节点的基本信息
     * </pre>
     *
     * <code>.NodeBase nodeBase = 1;</code>
     */
    public boolean hasNodeBase() {
      return nodeBase_ != null;
    }
    /**
     * <pre>
     * 当前节点的基本信息
     * </pre>
     *
     * <code>.NodeBase nodeBase = 1;</code>
     */
    public NodeBaseProto.NodeBase getNodeBase() {
      return nodeBase_ == null ? NodeBaseProto.NodeBase.getDefaultInstance() : nodeBase_;
    }
    /**
     * <pre>
     * 当前节点的基本信息
     * </pre>
     *
     * <code>.NodeBase nodeBase = 1;</code>
     */
    public NodeBaseProto.NodeBaseOrBuilder getNodeBaseOrBuilder() {
      return getNodeBase();
    }

    public static final int ADDRESSELECTIONMAP_FIELD_NUMBER = 2;
    private static final class AddressElectionMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, String> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, String>newDefaultInstance(
                  NodeProto.internal_static_Node_AddressElectionMapEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        String, String> addressElectionMap_;
    private com.google.protobuf.MapField<String, String>
    internalGetAddressElectionMap() {
      if (addressElectionMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AddressElectionMapDefaultEntryHolder.defaultEntry);
      }
      return addressElectionMap_;
    }

    public int getAddressElectionMapCount() {
      return internalGetAddressElectionMap().getMap().size();
    }
    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */

    public boolean containsAddressElectionMap(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetAddressElectionMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAddressElectionMapMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, String> getAddressElectionMap() {
      return getAddressElectionMapMap();
    }
    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */

    public java.util.Map<String, String> getAddressElectionMapMap() {
      return internalGetAddressElectionMap().getMap();
    }
    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */

    public String getAddressElectionMapOrDefault(
        String key,
        String defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, String> map =
          internalGetAddressElectionMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * 当前Hash访问的竞选中节点
     * </pre>
     *
     * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
     */

    public String getAddressElectionMapOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, String> map =
          internalGetAddressElectionMap().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int NODEBASEASSISTMAP_FIELD_NUMBER = 3;
    private static final class NodeBaseAssistMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, NodeBaseProto.NodeBase> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, NodeBaseProto.NodeBase>newDefaultInstance(
                  NodeProto.internal_static_Node_NodeBaseAssistMapEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  NodeBaseProto.NodeBase.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        String, NodeBaseProto.NodeBase> nodeBaseAssistMap_;
    private com.google.protobuf.MapField<String, NodeBaseProto.NodeBase>
    internalGetNodeBaseAssistMap() {
      if (nodeBaseAssistMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NodeBaseAssistMapDefaultEntryHolder.defaultEntry);
      }
      return nodeBaseAssistMap_;
    }

    public int getNodeBaseAssistMapCount() {
      return internalGetNodeBaseAssistMap().getMap().size();
    }
    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */

    public boolean containsNodeBaseAssistMap(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetNodeBaseAssistMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getNodeBaseAssistMapMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, NodeBaseProto.NodeBase> getNodeBaseAssistMap() {
      return getNodeBaseAssistMapMap();
    }
    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */

    public java.util.Map<String, NodeBaseProto.NodeBase> getNodeBaseAssistMapMap() {
      return internalGetNodeBaseAssistMap().getMap();
    }
    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */

    public NodeBaseProto.NodeBase getNodeBaseAssistMapOrDefault(
        String key,
        NodeBaseProto.NodeBase defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, NodeBaseProto.NodeBase> map =
          internalGetNodeBaseAssistMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
     * </pre>
     *
     * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
     */

    public NodeBaseProto.NodeBase getNodeBaseAssistMapOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, NodeBaseProto.NodeBase> map =
          internalGetNodeBaseAssistMap().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int ADDRESSMAP_FIELD_NUMBER = 4;
    private static final class AddressMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>newDefaultInstance(
                  NodeProto.internal_static_Node_AddressMapEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  cn.aberic.bother.entity.proto.MapListStringProto.MapListString.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> addressMap_;
    private com.google.protobuf.MapField<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>
    internalGetAddressMap() {
      if (addressMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AddressMapDefaultEntryHolder.defaultEntry);
      }
      return addressMap_;
    }

    public int getAddressMapCount() {
      return internalGetAddressMap().getMap().size();
    }
    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */

    public boolean containsAddressMap(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetAddressMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAddressMapMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> getAddressMap() {
      return getAddressMapMap();
    }
    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */

    public java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> getAddressMapMap() {
      return internalGetAddressMap().getMap();
    }
    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */

    public cn.aberic.bother.entity.proto.MapListStringProto.MapListString getAddressMapOrDefault(
        String key,
        cn.aberic.bother.entity.proto.MapListStringProto.MapListString defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> map =
          internalGetAddressMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
     * </pre>
     *
     * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
     */

    public cn.aberic.bother.entity.proto.MapListStringProto.MapListString getAddressMapOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> map =
          internalGetAddressMap().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int NODEASSISTMAP_FIELD_NUMBER = 5;
    private static final class NodeAssistMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, NodeAssistProto.NodeAssist> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, NodeAssistProto.NodeAssist>newDefaultInstance(
                  NodeProto.internal_static_Node_NodeAssistMapEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  NodeAssistProto.NodeAssist.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        String, NodeAssistProto.NodeAssist> nodeAssistMap_;
    private com.google.protobuf.MapField<String, NodeAssistProto.NodeAssist>
    internalGetNodeAssistMap() {
      if (nodeAssistMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NodeAssistMapDefaultEntryHolder.defaultEntry);
      }
      return nodeAssistMap_;
    }

    public int getNodeAssistMapCount() {
      return internalGetNodeAssistMap().getMap().size();
    }
    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */

    public boolean containsNodeAssistMap(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetNodeAssistMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getNodeAssistMapMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, NodeAssistProto.NodeAssist> getNodeAssistMap() {
      return getNodeAssistMapMap();
    }
    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */

    public java.util.Map<String, NodeAssistProto.NodeAssist> getNodeAssistMapMap() {
      return internalGetNodeAssistMap().getMap();
    }
    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */

    public NodeAssistProto.NodeAssist getNodeAssistMapOrDefault(
        String key,
        NodeAssistProto.NodeAssist defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, NodeAssistProto.NodeAssist> map =
          internalGetNodeAssistMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * 当前Hash协助节点对象
     * </pre>
     *
     * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
     */

    public NodeAssistProto.NodeAssist getNodeAssistMapOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, NodeAssistProto.NodeAssist> map =
          internalGetNodeAssistMap().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int NODEELECTIONMAP_FIELD_NUMBER = 6;
    private static final class NodeElectionMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, NodeElectionProto.NodeElection> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, NodeElectionProto.NodeElection>newDefaultInstance(
                  NodeProto.internal_static_Node_NodeElectionMapEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  NodeElectionProto.NodeElection.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        String, NodeElectionProto.NodeElection> nodeElectionMap_;
    private com.google.protobuf.MapField<String, NodeElectionProto.NodeElection>
    internalGetNodeElectionMap() {
      if (nodeElectionMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NodeElectionMapDefaultEntryHolder.defaultEntry);
      }
      return nodeElectionMap_;
    }

    public int getNodeElectionMapCount() {
      return internalGetNodeElectionMap().getMap().size();
    }
    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */

    public boolean containsNodeElectionMap(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetNodeElectionMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getNodeElectionMapMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, NodeElectionProto.NodeElection> getNodeElectionMap() {
      return getNodeElectionMapMap();
    }
    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */

    public java.util.Map<String, NodeElectionProto.NodeElection> getNodeElectionMapMap() {
      return internalGetNodeElectionMap().getMap();
    }
    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */

    public NodeElectionProto.NodeElection getNodeElectionMapOrDefault(
        String key,
        NodeElectionProto.NodeElection defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, NodeElectionProto.NodeElection> map =
          internalGetNodeElectionMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * 当前Hash节点竞选对象
     * </pre>
     *
     * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
     */

    public NodeElectionProto.NodeElection getNodeElectionMapOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, NodeElectionProto.NodeElection> map =
          internalGetNodeElectionMap().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (nodeBase_ != null) {
        output.writeMessage(1, getNodeBase());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAddressElectionMap(),
          AddressElectionMapDefaultEntryHolder.defaultEntry,
          2);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetNodeBaseAssistMap(),
          NodeBaseAssistMapDefaultEntryHolder.defaultEntry,
          3);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAddressMap(),
          AddressMapDefaultEntryHolder.defaultEntry,
          4);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetNodeAssistMap(),
          NodeAssistMapDefaultEntryHolder.defaultEntry,
          5);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetNodeElectionMap(),
          NodeElectionMapDefaultEntryHolder.defaultEntry,
          6);
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (nodeBase_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getNodeBase());
      }
      for (java.util.Map.Entry<String, String> entry
           : internalGetAddressElectionMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, String>
        addressElectionMap__ = AddressElectionMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, addressElectionMap__);
      }
      for (java.util.Map.Entry<String, NodeBaseProto.NodeBase> entry
           : internalGetNodeBaseAssistMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, NodeBaseProto.NodeBase>
        nodeBaseAssistMap__ = NodeBaseAssistMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, nodeBaseAssistMap__);
      }
      for (java.util.Map.Entry<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> entry
           : internalGetAddressMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>
        addressMap__ = AddressMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, addressMap__);
      }
      for (java.util.Map.Entry<String, NodeAssistProto.NodeAssist> entry
           : internalGetNodeAssistMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, NodeAssistProto.NodeAssist>
        nodeAssistMap__ = NodeAssistMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, nodeAssistMap__);
      }
      for (java.util.Map.Entry<String, NodeElectionProto.NodeElection> entry
           : internalGetNodeElectionMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, NodeElectionProto.NodeElection>
        nodeElectionMap__ = NodeElectionMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, nodeElectionMap__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof NodeProto.Node)) {
        return super.equals(obj);
      }
      NodeProto.Node other = (NodeProto.Node) obj;

      boolean result = true;
      result = result && (hasNodeBase() == other.hasNodeBase());
      if (hasNodeBase()) {
        result = result && getNodeBase()
            .equals(other.getNodeBase());
      }
      result = result && internalGetAddressElectionMap().equals(
          other.internalGetAddressElectionMap());
      result = result && internalGetNodeBaseAssistMap().equals(
          other.internalGetNodeBaseAssistMap());
      result = result && internalGetAddressMap().equals(
          other.internalGetAddressMap());
      result = result && internalGetNodeAssistMap().equals(
          other.internalGetNodeAssistMap());
      result = result && internalGetNodeElectionMap().equals(
          other.internalGetNodeElectionMap());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNodeBase()) {
        hash = (37 * hash) + NODEBASE_FIELD_NUMBER;
        hash = (53 * hash) + getNodeBase().hashCode();
      }
      if (!internalGetAddressElectionMap().getMap().isEmpty()) {
        hash = (37 * hash) + ADDRESSELECTIONMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAddressElectionMap().hashCode();
      }
      if (!internalGetNodeBaseAssistMap().getMap().isEmpty()) {
        hash = (37 * hash) + NODEBASEASSISTMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetNodeBaseAssistMap().hashCode();
      }
      if (!internalGetAddressMap().getMap().isEmpty()) {
        hash = (37 * hash) + ADDRESSMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAddressMap().hashCode();
      }
      if (!internalGetNodeAssistMap().getMap().isEmpty()) {
        hash = (37 * hash) + NODEASSISTMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetNodeAssistMap().hashCode();
      }
      if (!internalGetNodeElectionMap().getMap().isEmpty()) {
        hash = (37 * hash) + NODEELECTIONMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetNodeElectionMap().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static NodeProto.Node parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static NodeProto.Node parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static NodeProto.Node parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static NodeProto.Node parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static NodeProto.Node parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static NodeProto.Node parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static NodeProto.Node parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static NodeProto.Node parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static NodeProto.Node parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static NodeProto.Node parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static NodeProto.Node parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static NodeProto.Node parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(NodeProto.Node prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 节点基类对象
     * </pre>
     *
     * Protobuf type {@code Node}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Node)
        NodeProto.NodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return NodeProto.internal_static_Node_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetAddressElectionMap();
          case 3:
            return internalGetNodeBaseAssistMap();
          case 4:
            return internalGetAddressMap();
          case 5:
            return internalGetNodeAssistMap();
          case 6:
            return internalGetNodeElectionMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableAddressElectionMap();
          case 3:
            return internalGetMutableNodeBaseAssistMap();
          case 4:
            return internalGetMutableAddressMap();
          case 5:
            return internalGetMutableNodeAssistMap();
          case 6:
            return internalGetMutableNodeElectionMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return NodeProto.internal_static_Node_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                NodeProto.Node.class, NodeProto.Node.Builder.class);
      }

      // Construct using cn.aberic.bother.entity.proto.node.NodeProto.Node.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        if (nodeBaseBuilder_ == null) {
          nodeBase_ = null;
        } else {
          nodeBase_ = null;
          nodeBaseBuilder_ = null;
        }
        internalGetMutableAddressElectionMap().clear();
        internalGetMutableNodeBaseAssistMap().clear();
        internalGetMutableAddressMap().clear();
        internalGetMutableNodeAssistMap().clear();
        internalGetMutableNodeElectionMap().clear();
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return NodeProto.internal_static_Node_descriptor;
      }

      @Override
      public NodeProto.Node getDefaultInstanceForType() {
        return NodeProto.Node.getDefaultInstance();
      }

      @Override
      public NodeProto.Node build() {
        NodeProto.Node result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public NodeProto.Node buildPartial() {
        NodeProto.Node result = new NodeProto.Node(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (nodeBaseBuilder_ == null) {
          result.nodeBase_ = nodeBase_;
        } else {
          result.nodeBase_ = nodeBaseBuilder_.build();
        }
        result.addressElectionMap_ = internalGetAddressElectionMap();
        result.addressElectionMap_.makeImmutable();
        result.nodeBaseAssistMap_ = internalGetNodeBaseAssistMap();
        result.nodeBaseAssistMap_.makeImmutable();
        result.addressMap_ = internalGetAddressMap();
        result.addressMap_.makeImmutable();
        result.nodeAssistMap_ = internalGetNodeAssistMap();
        result.nodeAssistMap_.makeImmutable();
        result.nodeElectionMap_ = internalGetNodeElectionMap();
        result.nodeElectionMap_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof NodeProto.Node) {
          return mergeFrom((NodeProto.Node)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(NodeProto.Node other) {
        if (other == NodeProto.Node.getDefaultInstance()) return this;
        if (other.hasNodeBase()) {
          mergeNodeBase(other.getNodeBase());
        }
        internalGetMutableAddressElectionMap().mergeFrom(
            other.internalGetAddressElectionMap());
        internalGetMutableNodeBaseAssistMap().mergeFrom(
            other.internalGetNodeBaseAssistMap());
        internalGetMutableAddressMap().mergeFrom(
            other.internalGetAddressMap());
        internalGetMutableNodeAssistMap().mergeFrom(
            other.internalGetNodeAssistMap());
        internalGetMutableNodeElectionMap().mergeFrom(
            other.internalGetNodeElectionMap());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        NodeProto.Node parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (NodeProto.Node) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private NodeBaseProto.NodeBase nodeBase_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          NodeBaseProto.NodeBase, NodeBaseProto.NodeBase.Builder, NodeBaseProto.NodeBaseOrBuilder> nodeBaseBuilder_;
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      public boolean hasNodeBase() {
        return nodeBaseBuilder_ != null || nodeBase_ != null;
      }
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      public NodeBaseProto.NodeBase getNodeBase() {
        if (nodeBaseBuilder_ == null) {
          return nodeBase_ == null ? NodeBaseProto.NodeBase.getDefaultInstance() : nodeBase_;
        } else {
          return nodeBaseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      public Builder setNodeBase(NodeBaseProto.NodeBase value) {
        if (nodeBaseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          nodeBase_ = value;
          onChanged();
        } else {
          nodeBaseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      public Builder setNodeBase(
          NodeBaseProto.NodeBase.Builder builderForValue) {
        if (nodeBaseBuilder_ == null) {
          nodeBase_ = builderForValue.build();
          onChanged();
        } else {
          nodeBaseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      public Builder mergeNodeBase(NodeBaseProto.NodeBase value) {
        if (nodeBaseBuilder_ == null) {
          if (nodeBase_ != null) {
            nodeBase_ =
              NodeBaseProto.NodeBase.newBuilder(nodeBase_).mergeFrom(value).buildPartial();
          } else {
            nodeBase_ = value;
          }
          onChanged();
        } else {
          nodeBaseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      public Builder clearNodeBase() {
        if (nodeBaseBuilder_ == null) {
          nodeBase_ = null;
          onChanged();
        } else {
          nodeBase_ = null;
          nodeBaseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      public NodeBaseProto.NodeBase.Builder getNodeBaseBuilder() {

        onChanged();
        return getNodeBaseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      public NodeBaseProto.NodeBaseOrBuilder getNodeBaseOrBuilder() {
        if (nodeBaseBuilder_ != null) {
          return nodeBaseBuilder_.getMessageOrBuilder();
        } else {
          return nodeBase_ == null ?
              NodeBaseProto.NodeBase.getDefaultInstance() : nodeBase_;
        }
      }
      /**
       * <pre>
       * 当前节点的基本信息
       * </pre>
       *
       * <code>.NodeBase nodeBase = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          NodeBaseProto.NodeBase, NodeBaseProto.NodeBase.Builder, NodeBaseProto.NodeBaseOrBuilder>
          getNodeBaseFieldBuilder() {
        if (nodeBaseBuilder_ == null) {
          nodeBaseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              NodeBaseProto.NodeBase, NodeBaseProto.NodeBase.Builder, NodeBaseProto.NodeBaseOrBuilder>(
                  getNodeBase(),
                  getParentForChildren(),
                  isClean());
          nodeBase_ = null;
        }
        return nodeBaseBuilder_;
      }

      private com.google.protobuf.MapField<
          String, String> addressElectionMap_;
      private com.google.protobuf.MapField<String, String>
      internalGetAddressElectionMap() {
        if (addressElectionMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AddressElectionMapDefaultEntryHolder.defaultEntry);
        }
        return addressElectionMap_;
      }
      private com.google.protobuf.MapField<String, String>
      internalGetMutableAddressElectionMap() {
        onChanged();;
        if (addressElectionMap_ == null) {
          addressElectionMap_ = com.google.protobuf.MapField.newMapField(
              AddressElectionMapDefaultEntryHolder.defaultEntry);
        }
        if (!addressElectionMap_.isMutable()) {
          addressElectionMap_ = addressElectionMap_.copy();
        }
        return addressElectionMap_;
      }

      public int getAddressElectionMapCount() {
        return internalGetAddressElectionMap().getMap().size();
      }
      /**
       * <pre>
       * 当前Hash访问的竞选中节点
       * </pre>
       *
       * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
       */

      public boolean containsAddressElectionMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetAddressElectionMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAddressElectionMapMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, String> getAddressElectionMap() {
        return getAddressElectionMapMap();
      }
      /**
       * <pre>
       * 当前Hash访问的竞选中节点
       * </pre>
       *
       * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
       */

      public java.util.Map<String, String> getAddressElectionMapMap() {
        return internalGetAddressElectionMap().getMap();
      }
      /**
       * <pre>
       * 当前Hash访问的竞选中节点
       * </pre>
       *
       * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
       */

      public String getAddressElectionMapOrDefault(
          String key,
          String defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, String> map =
            internalGetAddressElectionMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * 当前Hash访问的竞选中节点
       * </pre>
       *
       * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
       */

      public String getAddressElectionMapOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, String> map =
            internalGetAddressElectionMap().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearAddressElectionMap() {
        internalGetMutableAddressElectionMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * 当前Hash访问的竞选中节点
       * </pre>
       *
       * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
       */

      public Builder removeAddressElectionMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableAddressElectionMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, String>
      getMutableAddressElectionMap() {
        return internalGetMutableAddressElectionMap().getMutableMap();
      }
      /**
       * <pre>
       * 当前Hash访问的竞选中节点
       * </pre>
       *
       * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
       */
      public Builder putAddressElectionMap(
          String key,
          String value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableAddressElectionMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * 当前Hash访问的竞选中节点
       * </pre>
       *
       * <code>map&lt;string, string&gt; addressElectionMap = 2;</code>
       */

      public Builder putAllAddressElectionMap(
          java.util.Map<String, String> values) {
        internalGetMutableAddressElectionMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          String, NodeBaseProto.NodeBase> nodeBaseAssistMap_;
      private com.google.protobuf.MapField<String, NodeBaseProto.NodeBase>
      internalGetNodeBaseAssistMap() {
        if (nodeBaseAssistMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              NodeBaseAssistMapDefaultEntryHolder.defaultEntry);
        }
        return nodeBaseAssistMap_;
      }
      private com.google.protobuf.MapField<String, NodeBaseProto.NodeBase>
      internalGetMutableNodeBaseAssistMap() {
        onChanged();;
        if (nodeBaseAssistMap_ == null) {
          nodeBaseAssistMap_ = com.google.protobuf.MapField.newMapField(
              NodeBaseAssistMapDefaultEntryHolder.defaultEntry);
        }
        if (!nodeBaseAssistMap_.isMutable()) {
          nodeBaseAssistMap_ = nodeBaseAssistMap_.copy();
        }
        return nodeBaseAssistMap_;
      }

      public int getNodeBaseAssistMapCount() {
        return internalGetNodeBaseAssistMap().getMap().size();
      }
      /**
       * <pre>
       * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
       * </pre>
       *
       * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
       */

      public boolean containsNodeBaseAssistMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetNodeBaseAssistMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getNodeBaseAssistMapMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, NodeBaseProto.NodeBase> getNodeBaseAssistMap() {
        return getNodeBaseAssistMapMap();
      }
      /**
       * <pre>
       * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
       * </pre>
       *
       * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
       */

      public java.util.Map<String, NodeBaseProto.NodeBase> getNodeBaseAssistMapMap() {
        return internalGetNodeBaseAssistMap().getMap();
      }
      /**
       * <pre>
       * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
       * </pre>
       *
       * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
       */

      public NodeBaseProto.NodeBase getNodeBaseAssistMapOrDefault(
          String key,
          NodeBaseProto.NodeBase defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, NodeBaseProto.NodeBase> map =
            internalGetNodeBaseAssistMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
       * </pre>
       *
       * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
       */

      public NodeBaseProto.NodeBase getNodeBaseAssistMapOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, NodeBaseProto.NodeBase> map =
            internalGetNodeBaseAssistMap().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearNodeBaseAssistMap() {
        internalGetMutableNodeBaseAssistMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
       * </pre>
       *
       * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
       */

      public Builder removeNodeBaseAssistMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableNodeBaseAssistMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, NodeBaseProto.NodeBase>
      getMutableNodeBaseAssistMap() {
        return internalGetMutableNodeBaseAssistMap().getMutableMap();
      }
      /**
       * <pre>
       * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
       * </pre>
       *
       * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
       */
      public Builder putNodeBaseAssistMap(
          String key,
          NodeBaseProto.NodeBase value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableNodeBaseAssistMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * 当前Hash访问的竞选节点指定协助节点，协助节点将辅助竞选节点管理竞选节点下的子节点，即用于处理除了竞选工作以外的所有事务，如：内部排序、节点加减管理等
       * </pre>
       *
       * <code>map&lt;string, .NodeBase&gt; nodeBaseAssistMap = 3;</code>
       */

      public Builder putAllNodeBaseAssistMap(
          java.util.Map<String, NodeBaseProto.NodeBase> values) {
        internalGetMutableNodeBaseAssistMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> addressMap_;
      private com.google.protobuf.MapField<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>
      internalGetAddressMap() {
        if (addressMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AddressMapDefaultEntryHolder.defaultEntry);
        }
        return addressMap_;
      }
      private com.google.protobuf.MapField<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>
      internalGetMutableAddressMap() {
        onChanged();;
        if (addressMap_ == null) {
          addressMap_ = com.google.protobuf.MapField.newMapField(
              AddressMapDefaultEntryHolder.defaultEntry);
        }
        if (!addressMap_.isMutable()) {
          addressMap_ = addressMap_.copy();
        }
        return addressMap_;
      }

      public int getAddressMapCount() {
        return internalGetAddressMap().getMap().size();
      }
      /**
       * <pre>
       * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
       * </pre>
       *
       * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
       */

      public boolean containsAddressMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetAddressMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAddressMapMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> getAddressMap() {
        return getAddressMapMap();
      }
      /**
       * <pre>
       * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
       * </pre>
       *
       * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
       */

      public java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> getAddressMapMap() {
        return internalGetAddressMap().getMap();
      }
      /**
       * <pre>
       * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
       * </pre>
       *
       * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
       */

      public cn.aberic.bother.entity.proto.MapListStringProto.MapListString getAddressMapOrDefault(
          String key,
          cn.aberic.bother.entity.proto.MapListStringProto.MapListString defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> map =
            internalGetAddressMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
       * </pre>
       *
       * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
       */

      public cn.aberic.bother.entity.proto.MapListStringProto.MapListString getAddressMapOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> map =
            internalGetAddressMap().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearAddressMap() {
        internalGetMutableAddressMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
       * </pre>
       *
       * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
       */

      public Builder removeAddressMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableAddressMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString>
      getMutableAddressMap() {
        return internalGetMutableAddressMap().getMutableMap();
      }
      /**
       * <pre>
       * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
       * </pre>
       *
       * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
       */
      public Builder putAddressMap(
          String key,
          cn.aberic.bother.entity.proto.MapListStringProto.MapListString value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableAddressMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * 当前Hash已知备用节点集合/随机节点数 &lt;= 100
       * </pre>
       *
       * <code>map&lt;string, .MapListString&gt; addressMap = 4;</code>
       */

      public Builder putAllAddressMap(
          java.util.Map<String, cn.aberic.bother.entity.proto.MapListStringProto.MapListString> values) {
        internalGetMutableAddressMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          String, NodeAssistProto.NodeAssist> nodeAssistMap_;
      private com.google.protobuf.MapField<String, NodeAssistProto.NodeAssist>
      internalGetNodeAssistMap() {
        if (nodeAssistMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              NodeAssistMapDefaultEntryHolder.defaultEntry);
        }
        return nodeAssistMap_;
      }
      private com.google.protobuf.MapField<String, NodeAssistProto.NodeAssist>
      internalGetMutableNodeAssistMap() {
        onChanged();;
        if (nodeAssistMap_ == null) {
          nodeAssistMap_ = com.google.protobuf.MapField.newMapField(
              NodeAssistMapDefaultEntryHolder.defaultEntry);
        }
        if (!nodeAssistMap_.isMutable()) {
          nodeAssistMap_ = nodeAssistMap_.copy();
        }
        return nodeAssistMap_;
      }

      public int getNodeAssistMapCount() {
        return internalGetNodeAssistMap().getMap().size();
      }
      /**
       * <pre>
       * 当前Hash协助节点对象
       * </pre>
       *
       * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
       */

      public boolean containsNodeAssistMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetNodeAssistMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getNodeAssistMapMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, NodeAssistProto.NodeAssist> getNodeAssistMap() {
        return getNodeAssistMapMap();
      }
      /**
       * <pre>
       * 当前Hash协助节点对象
       * </pre>
       *
       * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
       */

      public java.util.Map<String, NodeAssistProto.NodeAssist> getNodeAssistMapMap() {
        return internalGetNodeAssistMap().getMap();
      }
      /**
       * <pre>
       * 当前Hash协助节点对象
       * </pre>
       *
       * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
       */

      public NodeAssistProto.NodeAssist getNodeAssistMapOrDefault(
          String key,
          NodeAssistProto.NodeAssist defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, NodeAssistProto.NodeAssist> map =
            internalGetNodeAssistMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * 当前Hash协助节点对象
       * </pre>
       *
       * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
       */

      public NodeAssistProto.NodeAssist getNodeAssistMapOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, NodeAssistProto.NodeAssist> map =
            internalGetNodeAssistMap().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearNodeAssistMap() {
        internalGetMutableNodeAssistMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * 当前Hash协助节点对象
       * </pre>
       *
       * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
       */

      public Builder removeNodeAssistMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableNodeAssistMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, NodeAssistProto.NodeAssist>
      getMutableNodeAssistMap() {
        return internalGetMutableNodeAssistMap().getMutableMap();
      }
      /**
       * <pre>
       * 当前Hash协助节点对象
       * </pre>
       *
       * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
       */
      public Builder putNodeAssistMap(
          String key,
          NodeAssistProto.NodeAssist value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableNodeAssistMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * 当前Hash协助节点对象
       * </pre>
       *
       * <code>map&lt;string, .NodeAssist&gt; nodeAssistMap = 5;</code>
       */

      public Builder putAllNodeAssistMap(
          java.util.Map<String, NodeAssistProto.NodeAssist> values) {
        internalGetMutableNodeAssistMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          String, NodeElectionProto.NodeElection> nodeElectionMap_;
      private com.google.protobuf.MapField<String, NodeElectionProto.NodeElection>
      internalGetNodeElectionMap() {
        if (nodeElectionMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              NodeElectionMapDefaultEntryHolder.defaultEntry);
        }
        return nodeElectionMap_;
      }
      private com.google.protobuf.MapField<String, NodeElectionProto.NodeElection>
      internalGetMutableNodeElectionMap() {
        onChanged();;
        if (nodeElectionMap_ == null) {
          nodeElectionMap_ = com.google.protobuf.MapField.newMapField(
              NodeElectionMapDefaultEntryHolder.defaultEntry);
        }
        if (!nodeElectionMap_.isMutable()) {
          nodeElectionMap_ = nodeElectionMap_.copy();
        }
        return nodeElectionMap_;
      }

      public int getNodeElectionMapCount() {
        return internalGetNodeElectionMap().getMap().size();
      }
      /**
       * <pre>
       * 当前Hash节点竞选对象
       * </pre>
       *
       * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
       */

      public boolean containsNodeElectionMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetNodeElectionMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getNodeElectionMapMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, NodeElectionProto.NodeElection> getNodeElectionMap() {
        return getNodeElectionMapMap();
      }
      /**
       * <pre>
       * 当前Hash节点竞选对象
       * </pre>
       *
       * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
       */

      public java.util.Map<String, NodeElectionProto.NodeElection> getNodeElectionMapMap() {
        return internalGetNodeElectionMap().getMap();
      }
      /**
       * <pre>
       * 当前Hash节点竞选对象
       * </pre>
       *
       * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
       */

      public NodeElectionProto.NodeElection getNodeElectionMapOrDefault(
          String key,
          NodeElectionProto.NodeElection defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, NodeElectionProto.NodeElection> map =
            internalGetNodeElectionMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * 当前Hash节点竞选对象
       * </pre>
       *
       * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
       */

      public NodeElectionProto.NodeElection getNodeElectionMapOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, NodeElectionProto.NodeElection> map =
            internalGetNodeElectionMap().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearNodeElectionMap() {
        internalGetMutableNodeElectionMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * 当前Hash节点竞选对象
       * </pre>
       *
       * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
       */

      public Builder removeNodeElectionMap(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableNodeElectionMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, NodeElectionProto.NodeElection>
      getMutableNodeElectionMap() {
        return internalGetMutableNodeElectionMap().getMutableMap();
      }
      /**
       * <pre>
       * 当前Hash节点竞选对象
       * </pre>
       *
       * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
       */
      public Builder putNodeElectionMap(
          String key,
          NodeElectionProto.NodeElection value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableNodeElectionMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * 当前Hash节点竞选对象
       * </pre>
       *
       * <code>map&lt;string, .NodeElection&gt; nodeElectionMap = 6;</code>
       */

      public Builder putAllNodeElectionMap(
          java.util.Map<String, NodeElectionProto.NodeElection> values) {
        internalGetMutableNodeElectionMap().getMutableMap()
            .putAll(values);
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Node)
    }

    // @@protoc_insertion_point(class_scope:Node)
    private static final NodeProto.Node DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NodeProto.Node();
    }

    public static NodeProto.Node getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Node>
        PARSER = new com.google.protobuf.AbstractParser<Node>() {
      @Override
      public Node parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Node(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Node> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Node> getParserForType() {
      return PARSER;
    }

    @Override
    public NodeProto.Node getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Node_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Node_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Node_AddressElectionMapEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Node_AddressElectionMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Node_NodeBaseAssistMapEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Node_NodeBaseAssistMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Node_AddressMapEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Node_AddressMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Node_NodeAssistMapEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Node_NodeAssistMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Node_NodeElectionMapEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Node_NodeElectionMapEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\017node/Node.proto\032\023node/NodeBase.proto\032\025" +
      "node/NodeAssist.proto\032\027node/NodeElection" +
      ".proto\032\023MapListString.proto\"\365\004\n\004Node\022\033\n\010" +
      "nodeBase\030\001 \001(\0132\t.NodeBase\0229\n\022addressElec" +
      "tionMap\030\002 \003(\0132\035.Node.AddressElectionMapE" +
      "ntry\0227\n\021nodeBaseAssistMap\030\003 \003(\0132\034.Node.N" +
      "odeBaseAssistMapEntry\022)\n\naddressMap\030\004 \003(" +
      "\0132\025.Node.AddressMapEntry\022/\n\rnodeAssistMa" +
      "p\030\005 \003(\0132\030.Node.NodeAssistMapEntry\0223\n\017nod" +
      "eElectionMap\030\006 \003(\0132\032.Node.NodeElectionMa" +
      "pEntry\0329\n\027AddressElectionMapEntry\022\013\n\003key" +
      "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032C\n\026NodeBaseAss" +
      "istMapEntry\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132" +
      "\t.NodeBase:\0028\001\032A\n\017AddressMapEntry\022\013\n\003key" +
      "\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016.MapListString:\0028" +
      "\001\032A\n\022NodeAssistMapEntry\022\013\n\003key\030\001 \001(\t\022\032\n\005" +
      "value\030\002 \001(\0132\013.NodeAssist:\0028\001\032E\n\024NodeElec" +
      "tionMapEntry\022\013\n\003key\030\001 \001(\t\022\034\n\005value\030\002 \001(\013" +
      "2\r.NodeElection:\0028\001B/\n\"cn.aberic.bother." +
      "entity.proto.nodeB\tNodeProtob\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          NodeBaseProto.getDescriptor(),
          NodeAssistProto.getDescriptor(),
          NodeElectionProto.getDescriptor(),
          cn.aberic.bother.entity.proto.MapListStringProto.getDescriptor(),
        }, assigner);
    internal_static_Node_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Node_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Node_descriptor,
        new String[] { "NodeBase", "AddressElectionMap", "NodeBaseAssistMap", "AddressMap", "NodeAssistMap", "NodeElectionMap", });
    internal_static_Node_AddressElectionMapEntry_descriptor =
      internal_static_Node_descriptor.getNestedTypes().get(0);
    internal_static_Node_AddressElectionMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Node_AddressElectionMapEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_Node_NodeBaseAssistMapEntry_descriptor =
      internal_static_Node_descriptor.getNestedTypes().get(1);
    internal_static_Node_NodeBaseAssistMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Node_NodeBaseAssistMapEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_Node_AddressMapEntry_descriptor =
      internal_static_Node_descriptor.getNestedTypes().get(2);
    internal_static_Node_AddressMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Node_AddressMapEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_Node_NodeAssistMapEntry_descriptor =
      internal_static_Node_descriptor.getNestedTypes().get(3);
    internal_static_Node_NodeAssistMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Node_NodeAssistMapEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_Node_NodeElectionMapEntry_descriptor =
      internal_static_Node_descriptor.getNestedTypes().get(4);
    internal_static_Node_NodeElectionMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Node_NodeElectionMapEntry_descriptor,
        new String[] { "Key", "Value", });
    NodeBaseProto.getDescriptor();
    NodeAssistProto.getDescriptor();
    NodeElectionProto.getDescriptor();
    cn.aberic.bother.entity.proto.MapListStringProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
